{"version":3,"sources":["components/Header/Header.js","components/Country/Country.js","components/Home/Home.js","components/CountryInformation/CountryInformation.js","components/CountryDetails/CountryDetails.js","components/Feature/Feature.js","components/Contact/Contact.js","components/NoMatch/NoMatch.js","App.js","serviceWorker.js","index.js"],"names":["Header","className","Navbar","bg","variant","Container","Brand","href","Nav","Link","Button","onClick","alert","Country","props","name","country","to","ListGroup","Item","action","Home","useState","setCountry","useEffect","fetch","then","res","json","data","length","Row","map","Col","md","CountryInformation","details","capital","region","population","area","flag","natives","languages","src","alt","lang","nativeName","CountryDetails","countryName","useParams","setDetails","url","Feature","Contact","NoMatch","App","path","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.bf555fae.chunk.js","sourcesContent":["import React from 'react';\r\nimport { Navbar, Nav, Button, Container } from 'react-bootstrap';\r\n\r\nconst Header = () => {\r\n    const btnHandler = () => {\r\n        alert(\"Try Again Later\");\r\n    }\r\n    return (\r\n        <div className=\"navbar-area\">\r\n            <Navbar bg=\"dark\" variant=\"dark\">\r\n                <Container>\r\n                    <Navbar.Brand className=\"font-weight-bold\" href=\"/home\">InfoBD</Navbar.Brand>\r\n                    <Nav className=\"ml-auto\">\r\n                        <Nav.Link href=\"/home\">Country</Nav.Link>\r\n                        <Nav.Link href=\"/features\">Features</Nav.Link>\r\n                        <Nav.Link href=\"/contact\">Contact</Nav.Link>\r\n                    </Nav>\r\n                    <Button onClick={btnHandler} variant=\"outline-warning ml-4 rounded-pill\">Login</Button>\r\n                </Container>\r\n            </Navbar>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default Header;","import React from 'react';\r\nimport { ListGroup } from 'react-bootstrap';\r\nimport { Link } from 'react-router-dom';\r\n\r\nconst Country = (props) => {\r\n    const { name } = props.country;\r\n    return (\r\n        <div>\r\n\r\n            <Link to={`/country/${name}`}>\r\n                <ListGroup>\r\n                    <ListGroup.Item action className=\"text-primary font-weight-bold\" variant=\"secondary\">\r\n                        {name}\r\n                    </ListGroup.Item>\r\n                </ListGroup>\r\n            </Link >\r\n\r\n        </div >\r\n    );\r\n};\r\n\r\nexport default Country;","import React from 'react';\r\nimport { useState } from 'react';\r\nimport { useEffect } from 'react';\r\nimport { Container, Row, Col, ListGroup } from 'react-bootstrap';\r\nimport Country from '../Country/Country';\r\n\r\nconst Home = () => {\r\n    const [country, setCountry] = useState([]);\r\n    useEffect(() => {\r\n        const url = 'https://restcountries.eu/rest/v2/all';\r\n        fetch(url)\r\n            .then(res => res.json())\r\n            .then(data => setCountry(data))\r\n    }, []);\r\n    return (\r\n        <div className=\"home-area py-3 bg-secondary text-light\">\r\n            <Container>\r\n                <h4 className=\"py-3\">Total Country : {country.length}</h4>\r\n                <Row>\r\n                    {\r\n                        country.map((country) =>\r\n                            <Col md={3} className=\"p-1\">\r\n                                <Country country={country} />\r\n                            </Col>\r\n                        )\r\n                    }\r\n                </Row>\r\n\r\n            </Container>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default Home;","import React from 'react';\r\nimport { Row, Col, Container } from 'react-bootstrap';\r\nimport './CountryInformation.css';\r\n\r\nconst CountryInformation = (props) => {\r\n    const { name, capital, region, population, area, flag } = props.details;\r\n    const natives = props.details.languages;\r\n    return (\r\n        <div className=\"py-5\">\r\n            <Container>\r\n                <Row className=\"align-items-center justify-content-center d-flex\">\r\n                    <Col md={6}>\r\n                        <div className=\"flag-area\">\r\n                            <img className=\"w-100\" src={flag} alt=\"\" />\r\n                        </div>\r\n                    </Col>\r\n                    <Col md={6}>\r\n                        <div className=\"details-area\">\r\n                            <h3 className=\"text-success pb-3 font-weight-bold\">{name}</h3>\r\n                            <div className=\"justify-content-between d-flex\">\r\n                                <p className=\"title-text\">Capital</p>\r\n                                <p className=\"info-text\">{capital}</p>\r\n                            </div>\r\n                            <div className=\"justify-content-between d-flex\">\r\n                                <p className=\"title-text\">Region</p>\r\n                                <p className=\"info-text\">{region}</p>\r\n                            </div>\r\n                            <div className=\"justify-content-between d-flex\">\r\n                                <p className=\"title-text\">Population</p>\r\n                                <p className=\"info-text\">{population}</p>\r\n                            </div>\r\n                            <div className=\"justify-content-between d-flex\">\r\n                                <p className=\"title-text\">Area</p>\r\n                                <p className=\"info-text\">{area} <small><strong>Square K.M.</strong></small></p>\r\n                            </div>\r\n                            {\r\n                                natives.map((lang) =>\r\n                                    <div className=\"justify-content-between d-flex\">\r\n                                        <p className=\"title-text\">Language</p>\r\n                                        <p className=\"info-text\">{lang.name} / {lang.nativeName}</p>\r\n                                    </div>\r\n                                )\r\n                            }\r\n                        </div>\r\n                    </Col>\r\n                </Row >\r\n            </Container >\r\n        </div >\r\n    );\r\n};\r\n\r\nexport default CountryInformation;","import React, { useState } from 'react';\r\nimport { useParams } from 'react-router-dom';\r\nimport { useEffect } from 'react';\r\nimport CountryInformation from '../CountryInformation/CountryInformation';\r\n\r\nconst CountryDetails = () => {\r\n    const { countryName } = useParams();\r\n    const [details, setDetails] = useState([]);\r\n    useEffect(() => {\r\n        const url = `https://restcountries.eu/rest/v2/name/${countryName}`;\r\n        fetch(url)\r\n            .then(res => res.json())\r\n            .then(data => setDetails(data))\r\n    }, []);\r\n\r\n    return (\r\n        <div>\r\n            {\r\n                details.map(details => <CountryInformation details={details} />)\r\n            }\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default CountryDetails;","import React from 'react';\r\n\r\nconst Feature = () => {\r\n    return (\r\n        <div className=\"container\">\r\n            <h3 className=\" pt-5 text-center text-success\">Developer is Sleeping</h3>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default Feature;","import React from 'react';\r\n\r\nconst Contact = () => {\r\n    return (\r\n        <div className=\"container\">\r\n            <h3 className=\" pt-5 text-center text-info\">Developer is Busy Now, Try again later</h3>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default Contact;","import React from 'react';\r\n\r\nconst NoMatch = () => {\r\n    return (\r\n        <div className=\"container\">\r\n            <h3 className=\" pt-5 text-danger\">Page No Found</h3>\r\n            <h5 className=\"text-danger\">404 error</h5>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default NoMatch;","import React from 'react';\r\nimport 'bootstrap/dist/css/bootstrap.min.css';\r\n// import { Button } from 'react-bootstrap';\r\n// import { Button } from '@material-ui/core';\r\n// import { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\r\n// import { faCoffee } from '@fortawesome/free-solid-svg-icons';\r\nimport { BrowserRouter as Router, Switch, Route } from \"react-router-dom\";\r\nimport './App.css';\r\nimport Header from './components/Header/Header';\r\nimport Home from './components/Home/Home';\r\nimport CountryDetails from './components/CountryDetails/CountryDetails';\r\nimport Feature from './components/Feature/Feature';\r\nimport Contact from './components/Contact/Contact';\r\nimport NoMatch from './components/NoMatch/NoMatch';\r\n\r\nfunction App() {\r\n  return (\r\n    <div className=\"main-container\">\r\n      <Router>\r\n        <Header />\r\n        <Switch>\r\n          <Route path=\"/home\">\r\n            <Home />\r\n          </Route>\r\n          <Route path=\"/features\">\r\n            <Feature />\r\n          </Route>\r\n          <Route path=\"/contact\">\r\n            <Contact />\r\n          </Route>\r\n          <Route path=\"/country/:countryName\">\r\n            <CountryDetails />\r\n          </Route>\r\n          <Route path=\"*\">\r\n            <NoMatch />\r\n          </Route>\r\n        </Switch>\r\n      </Router>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}